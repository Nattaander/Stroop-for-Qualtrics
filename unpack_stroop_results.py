'''
######

This script takes apart the data file exported from Qualtrics that includes SART data
Things to do:
- Refactor repititions and redundancy (eg, appending entries to data_cols, looping both stroop sets separately)
- Add embedded data to Qualtrics for tracking configuration of the SARTs, removing need for hardcoded values
- Post-mistake slowing
- More efficient handling of the SART data points (maybe through single embedded data field that includes all trial results in JSON format if possible)
- Add whole script to the Hermes API so it can be invoked automatically once the survey is closed

######
'''


import pandas
import json
import logging
from datetime import datetime
import os

now = datetime.now().strftime("%Y-%m-%d_%H-%M")
today = datetime.now().strftime("%Y-%m-%d")

dirs = ["completed", f"completed/{today}"]

for d in dirs:
	if not os.path.exists(d):
			# mkdir creates a directory/folder
			os.mkdir(d)
			print(f'[creating directory "{d}"]')
	else:
		print(f'[directory "{d}" exists]')

print('[creating log file]')

# slap a log in there in case something happens and we need to know why data is missing
logging.basicConfig(filename=f"completed/{today}/log_{now}.log", filemode='w', encoding="utf-8", level=logging.INFO)

def log(message):
	logging.info(message)
	print(message)

csv_in = pandas.read_csv('stroop.csv', sep=',')
# make a pandas data frame to work from
# once set up, this can just take all the stroop info
# the whole thing can be dumped very easily into a csv then
data_cols = []
data_cols.append('participantID')

for s in range(1, 33):
	data_cols.append(f'stroopA{s}_rt')
	data_cols.append(f'stroopA{s}_word')
	data_cols.append(f'stroopA{s}_colour')
	data_cols.append(f'stroopA{s}_userAnswer')
	data_cols.append(f'stroopA{s}_correct')

# separated to keep the csv more readable
for s in range(1, 33):
	data_cols.append(f'stroopB{s}_rt')
	data_cols.append(f'stroopB{s}_word')
	data_cols.append(f'stroopB{s}_colour')
	data_cols.append(f'stroopB{s}_userAnswer')
	data_cols.append(f'stroopB{s}_correct')


# master dataframe
df_master = pandas.DataFrame([], columns=data_cols)

# go through each row 
# start at index 3 - first 3 rows are all the meta information and column names
for x in range(2, len(csv_in)):
	# drop all the empty cells
	row = csv_in.loc[x].dropna()
	#row = csv_in.loc[x]

	if 'PartN' in row.keys():
		# have a list ready to slap into the dataframe
		# have to track whether they said yes/no to reading the words
		stroop_data = []
		stroop_data.append(row['PartN'])

		#if 'stroopA1' in row.keys():
		print(f"++ Working on ID: {row['PartN']}")

		for run in ["A","B"]:
			if f'stroop{run}' in row.keys():
				stroop_j = json.loads(row[f'stroop{run}'])
				log(stroop_j)
				for trial in range(1, 33):
					stroop_trial = stroop_j[f'trial_{trial}']
					stroop_data.append(int(stroop_trial['rt']))
					stroop_data.append(stroop_trial['word'])
					stroop_data.append(stroop_trial['color'])
					stroop_data.append(stroop_trial['userAnswer'])
					stroop_data.append(stroop_trial['correct'])

			else:
				for trial in range(1, 33):
					stroop_data.append("n/a")
					stroop_data.append("n/a")
					stroop_data.append("n/a")
					stroop_data.append("n/a")
					stroop_data.append("n/a")
		
		# make a new dataframe to work with
		#log(data_cols)
		df = pandas.DataFrame([stroop_data], columns=data_cols)
		df_master = df_master.append(df, ignore_index=True)
		#else:
		#	log(f"ERR ~~ 0 found: {row['participantID']} didn't complete STROOP")
		#	log(f"~~~~~~ Most likely they were assigned a condition and an ID but left before starting the STROOP")
	else:
		log(f"ERR ~~ No participantID")
		log(f"~~~~~~ ID is generated by Qualtrics once the user is assigned their conditions")
		log(f"~~~~~~ If they don't have an ID, they likely didn't get far enough to complete the STROOP")
		
print("Here's the completed dataframe:")
print("=========================================================")
print(df_master)

log(f"COMPLETE ~~ STROOP results successfully extracted. See completed/{today}/stroop_results.csv")
log(f"~~~~~~~~~~~ The output log from this task is in completed/{today}/log_{now}.log")

df_master.to_csv(f'completed/{today}/stroop_results_{now}.csv')